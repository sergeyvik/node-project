#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-project:server');
var http = require('http');
let mysqlFunc = require('../public/javascripts/mysqlFunctions');
let xmlparse = require('../public/javascripts/xmlparse');
/*
mysqlFunc.ratingsRecord((data, results) => {
    console.log(results);
});
*/
/*
let cat = [ 'Развлекательные',
    'Информационные',
    'Познавательные',
    'Сериал',
    'Художественный фильм',
    'Детям',
    'Для взрослых',
    'Спорт' ];
mysqlFunc.recordInDirectoryDb("category_id", "program_category", "categories", cat, null);
*/
//mysqlFunc.idColumnFromTable("rating_id", "ratings", test => {console.log(test);});
/*
mysqlFunc.idColumnFromTable("rating_id", "ratings", test1 => {
    console.log(test1);
    let test = test1;
    console.log(test.length);
    console.log(mysqlFunc.lastIdInTable(test));
});
*/
//Получаем id последней записи в таблице
//mysqlFunc.lastIdInTable("rating_id", "ratings", test => {
    //console.log(test[0].id);
//});
//Получаем массив наименований справочника
mysqlFunc.masRecordsInBd("rating_id", "program_rating", "ratings", test => {
    //console.log(test);
});
mysqlFunc.masRecordsInBd("category_id", "program_category", "categories", test => {
    //console.log(test);
});

let qwer = ['0+', 18, '12+', 0];
let asdf = { '0+': 0, '18+': 1, '18': 2 };

//xmlparse.writeIcons(filesNames, "../images/");

//let ratingsForRecords = xmlparse.arrayForRecordInDb(qwer, asdf);
//console.log(ratingsForRecords);

//console.log(mysqlFunc.categoriesRec());

//Мой код
/*
var mysql = require("mysql");
var connection = mysql.createConnection({
    host: 'localhost',
    user: 'admin',
    password: '498777',
    database: 'tvp_test',
    port: 3308
});

connection.connect();
var query = connection.query("SELECT * FROM `ratings`", function (error, results, fields) {
    if(error) throw error;
    console.log(JSON.stringify(results));
    console.log(JSON.stringify(fields));
});
connection.end();
*/

/*
app.post("/", function (req, res) {
    console.log(req.headers['content-length']);
    console.log(req.headers['content-type']);
    res.statusCode = 200;
    res.end();
});
*/
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
